{"version":3,"sources":["components/UserSelector/UserSelector.tsx","components/PostsList/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm/NewCommentForm.tsx","services/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","services/user.ts","services/post.ts","index.tsx"],"names":["UserSelector","users","selectedUser","setSelectedUser","setSelectedPost","useState","isActive","setIsActive","className","type","onClick","name","id","role","map","currentUser","href","classNames","user","PostsList","posts","selectedPost","setIsFormShowed","handleReset","currentPost","title","post","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","initialFormValues","email","initialErrors","NewCommentForm","setComments","setErrorMessage","formValues","setFormValues","errors","setErrors","isSubmitted","setSubmited","emailPattern","handleChange","event","prev","target","value","onSubmit","preventDefault","normilizedName","trim","normilizedEmail","normilizedComment","test","comment","newComment","postId","catch","finally","htmlFor","placeholder","onChange","PostDetails","isFormShowed","comments","isLoading","setIsLoading","errorMessage","useEffect","handleDeleteComment","commentId","currentComment","filter","c","deleteComments","length","App","setUsers","setPosts","userId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6ce1e64.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../../types/User';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: (value: User) => void,\n  setSelectedPost: (value: Post | null) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n  setSelectedPost,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleSelectedUser = (user: User) => () => {\n    setSelectedUser(user);\n    setIsActive(false);\n    setSelectedPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => setIsActive(!isActive)}\n        >\n          <span>\n            {!selectedUser ? (\n              'Choose a user'\n            ) : (\n              selectedUser.name\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isActive && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(currentUser => (\n              <a\n                key={currentUser.id}\n                href={`#user-${currentUser.id}`}\n                className={classNames('dropdown-item', {\n                  'is-active': currentUser.id === selectedUser?.id,\n                })}\n                onClick={handleSelectedUser(currentUser)}\n              >\n                {currentUser.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Post } from '../../types/Post';\n\ntype Props = {\n  posts: Post[];\n  selectedPost: Post | null;\n  setSelectedPost: (value: Post | null) => void;\n  setIsFormShowed: (value: boolean) => void;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectedPost,\n  setSelectedPost,\n  setIsFormShowed,\n}) => {\n  const handleSelectPost = (post: Post) => () => {\n    setSelectedPost(post);\n    setIsFormShowed(false);\n  };\n\n  const handleReset = () => {\n    setSelectedPost(null);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(currentPost => (\n            <tr data-cy=\"Post\" key={currentPost.id}>\n              <td data-cy=\"PostId\">\n                {currentPost.id}\n              </td>\n\n              <td data-cy=\"PostTitle\">\n                {currentPost.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {currentPost.id === selectedPost?.id ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={handleReset}\n                  >\n                    Close\n                  </button>\n                ) : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={handleSelectPost(currentPost)}\n                  >\n                    Open\n                  </button>\n                )}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\n\nimport { Post } from '../../types/Post';\nimport { Comment } from '../../types/Comment';\n\nimport { addComments } from '../../services/comments';\n\ntype Props = {\n  selectedPost: Post;\n  setComments: (value: Comment[] | ((prev: Comment[]) => Comment[])) => void;\n  setErrorMessage: (value: string) => void;\n};\n\nconst initialFormValues = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nconst initialErrors = {\n  name: '',\n  email: '',\n  body: '',\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPost,\n  setComments,\n  setErrorMessage,\n}) => {\n  const [formValues, setFormValues] = useState(initialFormValues);\n  const [errors, setErrors] = useState(initialErrors);\n  const [isSubmitted, setSubmited] = useState(false);\n\n  const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLTextAreaElement>) => {\n    setFormValues((prev) => ({\n      ...prev, [event.target.name]: event.target.value,\n    }));\n    setErrors((prev) => ({\n      ...prev, [event.target.name]: '',\n    }));\n  };\n\n  const handleReset = () => {\n    setErrors({ name: '', email: '', body: '' });\n    setFormValues({ name: '', email: '', body: '' });\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    const normilizedName = formValues.name.trim();\n    const normilizedEmail = formValues.email.trim();\n    const normilizedComment = formValues.body.trim();\n\n    if (!normilizedName) {\n      setErrors((prev) => ({ ...prev, name: 'Name is required' }));\n    }\n\n    if (!normilizedEmail) {\n      setErrors({\n        ...errors,\n        email: 'Email is required',\n      });\n    }\n\n    if (normilizedEmail && !emailPattern.test(normilizedEmail)) {\n      setErrors({\n        ...errors,\n        email: 'Email is invalid',\n      });\n    }\n\n    if (!normilizedComment) {\n      setErrors((prev) => ({ ...prev, body: 'Enter some text' }));\n    }\n\n    if (!normilizedName\n      || !emailPattern.test(normilizedEmail)\n      || !normilizedComment\n    ) {\n      return;\n    }\n\n    const newComment = {\n      id: 0,\n      postId: selectedPost.id,\n      name: formValues.name,\n      email: formValues.email,\n      body: formValues.body,\n    };\n\n    setSubmited(true);\n\n    addComments(newComment)\n      .then(response => {\n        setComments((prev: Comment[]) => [...prev, response]);\n      })\n      .catch(() => setErrorMessage('Can not add a comment, try again later'))\n      .finally(() => {\n        setSubmited(false);\n\n        setFormValues({\n          ...formValues,\n          body: '',\n        });\n      });\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            value={formValues.name}\n            onChange={handleChange}\n            className={classNames('input', { 'is-danger': errors.name })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.name}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            onChange={handleChange}\n            value={formValues.email}\n            className={classNames('input', {\n              'is-danger': errors.email,\n            })}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {errors.name && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {errors.name && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.email}\n          </p>\n        )}\n\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            value={formValues.body}\n            onChange={handleChange}\n            className={classNames('textarea', {\n              'is-danger': errors.body,\n            })}\n          />\n        </div>\n\n        {errors.body && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {errors.body}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', {\n              'is-loading': isSubmitted,\n            })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleReset}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport function getComments(postId: number) {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n}\n\nexport function deleteComments(commentId: number) {\n  return client.delete(`/comments/${commentId}`);\n}\n\nexport function addComments(comment: Comment) {\n  return client.post<Comment>('/comments', comment);\n}\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { NewCommentForm } from '../NewCommentForm/NewCommentForm';\nimport { Post } from '../../types/Post';\nimport { deleteComments, getComments } from '../../services/comments';\nimport { Comment } from '../../types/Comment';\n\ntype Props = {\n  selectedPost: Post;\n  isFormShowed: boolean;\n  setIsFormShowed: (value: boolean) => void;\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isFormShowed,\n  setIsFormShowed,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setErrorMessage('');\n    setIsLoading(true);\n    getComments(selectedPost.id)\n      .then(setComments)\n      .catch(() => setErrorMessage('Something went wrong'))\n      .finally(() => setIsLoading(false));\n  }, [selectedPost]);\n\n  const handleWriteComment = () => {\n    setIsFormShowed(true);\n  };\n\n  const handleDeleteComment = (commentId: number) => () => {\n    setComments(currentComment => {\n      return currentComment.filter(c => c.id !== commentId);\n    });\n    deleteComments(commentId)\n      .catch(() => {\n        setComments(comments);\n        setErrorMessage('Can\\'t add a comment, try again later');\n      });\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost.id}: ${selectedPost.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader />}\n\n          {errorMessage && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {(!comments.length && !isLoading) && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {(comments.length > 0 && !isLoading) && (\n            <>\n              <p className=\"title is-4\">Comments:</p>\n\n              {comments.map(currentComment => (\n                <article\n                  key={currentComment.id}\n                  className=\"message is-small\"\n                  data-cy=\"Comment\"\n                >\n                  <div className=\"message-header\">\n                    <a href={`mailto:${currentComment.email}`} data-cy=\"CommentAuthor\">\n                      {currentComment.name}\n                    </a>\n                    <button\n                      data-cy=\"CommentDelete\"\n                      type=\"button\"\n                      className=\"delete is-small\"\n                      aria-label=\"delete\"\n                      onClick={handleDeleteComment(currentComment.id)}\n                    >\n                      delete button\n                    </button>\n                  </div>\n\n                  <div className=\"message-body\" data-cy=\"CommentBody\">\n                    {currentComment.body}\n                  </div>\n                </article>\n              ))}\n            </>\n          )}\n\n          {(!isLoading && !isFormShowed) && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isFormShowed && (\n          <NewCommentForm\n            selectedPost={selectedPost}\n            setComments={setComments}\n            setErrorMessage={setErrorMessage}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  useState,\n  useEffect,\n} from 'react';\n\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport 'bulma/bulma.sass';\nimport './App.scss';\nimport classNames from 'classnames';\n\nimport { UserSelector } from './components/UserSelector/UserSelector';\nimport { PostsList } from './components/PostsList/PostsList';\nimport { PostDetails } from './components/PostDetails/PostDetails';\nimport { Loader } from './components/Loader';\n\nimport { User } from './types/User';\nimport { Post } from './types/Post';\nimport { getUsers } from './services/user';\nimport { getPosts } from './services/post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[] | null>(null);\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isFormShowed, setIsFormShowed] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  useEffect(() => {\n    setErrorMessage('');\n    if (selectedUser) {\n      setIsLoading(true);\n      getPosts(selectedUser.id)\n        .then(setPosts)\n        .catch(() => setErrorMessage('Something went wrong!'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUser={selectedUser}\n                  setSelectedUser={setSelectedUser}\n                  setSelectedPost={setSelectedPost}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n\n                {isLoading && <Loader />}\n\n                {errorMessage && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n\n                {(posts && !posts.length && !isLoading) && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n\n                {(posts && posts.length > 0 && !isLoading) && (\n                  <PostsList\n                    posts={posts}\n                    selectedPost={selectedPost}\n                    setSelectedPost={setSelectedPost}\n                    setIsFormShowed={setIsFormShowed}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', {\n                'Sidebar--open': selectedPost,\n              },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              {selectedPost && (\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isFormShowed={isFormShowed}\n                  setIsFormShowed={setIsFormShowed}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport function getUsers() {\n  return client.get<User[]>('/users');\n}\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport function getPosts(userId: number) {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n}\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}